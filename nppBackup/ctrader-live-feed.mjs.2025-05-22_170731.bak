import * as net from 'net';
import * as fs from 'fs';
import * as path from 'path';
import readline from 'readline';
import dotenv from 'dotenv';
import protobuf from 'protobufjs';
import { fileURLToPath } from 'url';

// Load .env
dotenv.config();

const {
  CTRADER_ACCESS_TOKEN,
  CTRADER_CLIENT_ID,
  CTRADER_CLIENT_SECRET,
  CTRADER_ACCOUNT_ID
} = process.env;

const CTRADER_HOST = 'live.ctraderapi.com';
const CTRADER_PORT = 5035;

// Paths
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const PROTO_PATHS = [
  path.join(__dirname, 'protos/OpenApiCommonMessages.proto'),
  path.join(__dirname, 'protos/OpenApiMessages.proto'),
  path.join(__dirname, 'protos/OpenApiModelMessages.proto'),
];

// Load protobufs
const root = await protobuf.load(PROTO_PATHS);
const MessageTypes = {};
[
  'ProtoOAVersionReq', 'ProtoOAApplicationAuthReq', 'ProtoOAAccountAuthReq',
  'ProtoOASymbolsListReq', 'ProtoOASymbolsListRes',
  'ProtoOASubscribeSpotsReq', 'ProtoOASpotEvent',
  'ProtoOAErrorRes', 'ProtoOAAccountAuthRes'
].forEach(name => MessageTypes[name] = root.lookupType(name));

// Payload Type Enums
const PayloadTypeEnum = {
  PROTO_OA_VERSION_REQ: 2100, PROTO_OA_VERSION_RES: 2101,
  PROTO_OA_APPLICATION_AUTH_REQ: 2102, PROTO_OA_APPLICATION_AUTH_RES: 2103,
  PROTO_OA_ACCOUNT_AUTH_REQ: 2106, PROTO_OA_ACCOUNT_AUTH_RES: 2107,
  PROTO_OA_SYMBOLS_LIST_REQ: 2127, PROTO_OA_SYMBOLS_LIST_RES: 2128,
  PROTO_OA_SUBSCRIBE_SPOTS_REQ: 2108, PROTO_OA_SUBSCRIBE_SPOTS_RES: 2109,
  PROTO_OA_SPOT_EVENT: 2110, PROTO_OA_ERROR_RES: 2111
};

const payloadTypeMap = {
  ProtoOAVersionReq: 2100,
  ProtoOAApplicationAuthReq: 2102,
  ProtoOAAccountAuthReq: 2106,
  ProtoOASymbolsListReq: 2127,
  ProtoOASubscribeSpotsReq: 2108,
};

let connection;
let allSymbols = [];
let selectedSymbolId = null;

function sendMessage(typeName, payload) {
  const type = MessageTypes[typeName];
  const payloadType = payloadTypeMap[typeName];
  const errMsg = type.verify(payload);
  if (errMsg) throw Error(errMsg);

  const message = type.create(payload);
  const buffer = type.encode(message).finish();
  const header = Buffer.alloc(2);
  header.writeUInt16BE(payloadType);

  connection.write(Buffer.concat([header, buffer]));
  console.log(`→ Sent ${typeName}`);
}

// Prompt input from user
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function promptSymbolAndSubscribe() {
  rl.question('🔍 Enter symbol name (e.g., EURUSD): ', (symbolName) => {
    const found = allSymbols.find(s => s.symbolName === symbolName.trim().toUpperCase());
    if (!found) {
      console.error('❌ Symbol not found. Try again.');
      return promptSymbolAndSubscribe();
    }

    selectedSymbolId = found.symbolId;
    console.log(`💱 Subscribing to live prices for ${symbolName} (symbolId=${selectedSymbolId})`);

    sendMessage('ProtoOASubscribeSpotsReq', {
      ctidTraderAccountId: parseInt(CTRADER_ACCOUNT_ID),
      symbolId: selectedSymbolId
    });
  });
}

// Connect
connection = net.connect({ host: CTRADER_HOST, port: CTRADER_PORT }, () => {
  console.log('🔗 Connected to cTrader Open API');
  sendMessage('ProtoOAVersionReq', { version: '3.0' });
});

connection.on('data', (data) => {
  const payloadType = data.readUInt16BE(0);
  const payloadBuffer = data.slice(2);

  switch (payloadType) {
    case PayloadTypeEnum.PROTO_OA_VERSION_RES:
      console.log('📡 Version handshake complete');
      sendMessage('ProtoOAApplicationAuthReq', {
        clientId: CTRADER_CLIENT_ID,
        clientSecret: CTRADER_CLIENT_SECRET
      });
      break;

    case PayloadTypeEnum.PROTO_OA_APPLICATION_AUTH_RES:
      console.log('✅ Application authenticated');
      sendMessage('ProtoOAAccountAuthReq', {
        ctidTraderAccountId: parseInt(CTRADER_ACCOUNT_ID),
        accessToken: CTRADER_ACCESS_TOKEN
      });
      break;

    case PayloadTypeEnum.PROTO_OA_ACCOUNT_AUTH_RES:
      console.log('🔐 Account authenticated');
      sendMessage('ProtoOASymbolsListReq', {
        ctidTraderAccountId: parseInt(CTRADER_ACCOUNT_ID)
      });
      break;

    case PayloadTypeEnum.PROTO_OA_SYMBOLS_LIST_RES: {
      const res = MessageTypes.ProtoOASymbolsListRes.decode(payloadBuffer);
      allSymbols = res.symbol;
      console.log(`📃 Received ${allSymbols.length} symbols.`);

      const sample = allSymbols.slice(0, 10).map(s => s.symbolName).join(', ');
      console.log(`📌 Example symbols: ${sample} ...`);

      promptSymbolAndSubscribe();
      break;
    }

    case PayloadTypeEnum.PROTO_OA_SUBSCRIBE_SPOTS_RES:
      console.log('📶 Spot subscription confirmed.');
      break;

    case PayloadTypeEnum.PROTO_OA_SPOT_EVENT: {
      const spot = MessageTypes.ProtoOASpotEvent.decode(payloadBuffer);
      if (spot.symbolId === selectedSymbolId) {
        console.log(`💹 Tick: Bid = ${spot.bidPrice}, Ask = ${spot.askPrice}`);
      }
      break;
    }

    case PayloadTypeEnum.PROTO_OA_ERROR_RES: {
      const error = MessageTypes.ProtoOAErrorRes.decode(payloadBuffer);
      console.error(`❌ Error: ${error.errorCode} - ${error.description}`);
      break;
    }

    default:
      console.log(`ℹ️ Received unknown message type: ${payloadType}`);
  }
});

connection.on('error', (err) => {
  console.error('❌ Connection error:', err);
});

connection.on('end', () => {
  console.log('🔒 Connection closed');
});
