// ctrader-live-feed.mjs
import tls from 'tls';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';
import fetch from 'node-fetch';
import readline from 'readline';
import protobuf from 'protobufjs';
import { fileURLToPath } from 'url';

dotenv.config();

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const protoDir = path.join(__dirname, 'protos');

let {
  CTRADER_CLIENT_ID,
  CTRADER_CLIENT_SECRET,
  CTRADER_ACCESS_TOKEN,
  CTRADER_REFRESH_TOKEN,
  CTRADER_ACCOUNT_ID
} = process.env;

const CTP_OAUTH_ENDPOINT = 'https://connect.spotware.com/apps/token';

async function refreshAccessToken() {
  const response = await fetch(CTP_OAUTH_ENDPOINT, {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      grant_type: 'refresh_token',
      client_id: CTRADER_CLIENT_ID,
      client_secret: CTRADER_CLIENT_SECRET,
      refresh_token: CTRADER_REFRESH_TOKEN
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error(`❌ Token refresh failed: ${response.status} ${errorText}`);
    process.exit(1);
  }

  const data = await response.json();
  console.log('🔄 Token refreshed successfully');

  // Update .env file
  const envPath = path.join(__dirname, '.env');
  const envLines = fs.readFileSync(envPath, 'utf8').split('\n');
  const updateLine = (key, value) =>
    value ? `${key}=${value}` : envLines.find(line => line.startsWith(key));

  const newEnv = [
    updateLine('CTRADER_CLIENT_ID', CTRADER_CLIENT_ID),
    updateLine('CTRADER_CLIENT_SECRET', CTRADER_CLIENT_SECRET),
    updateLine('CTRADER_ACCESS_TOKEN', data.access_token),
    updateLine('CTRADER_REFRESH_TOKEN', data.refresh_token),
    updateLine('CTRADER_ACCOUNT_ID', CTRADER_ACCOUNT_ID)
  ].join('\n');

  fs.writeFileSync(envPath, newEnv, 'utf8');
  CTRADER_ACCESS_TOKEN = data.access_token;
}

async function startTickStream() {
  // After creating the TLS socket:
	const socket = tls.connect(
	  {
		host: 'live.ctraderapi.com',
		port: 5035,
		servername: 'live.ctraderapi.com',
	  },
	  () => {
		console.log('🔗 Connected');
		sendMessage(socket, 'ProtoOAVersionReq', {
		  version: { major: 2, minor: 0, patch: 0 },
		});
	  }
	);

	// ✅ Fix: declare buffer outside the handler
	let recvBuffer = Buffer.alloc(0);

	// 🧠 Keep this inside the `startTickStream()` function
	socket.on('data', (chunk) => {
	  recvBuffer = Buffer.concat([recvBuffer, chunk]); // ✅ No more ReferenceError

	  try {
		while (recvBuffer.length > 2) {
		  const msgSize = recvBuffer.readUInt16BE(0);
		  if (recvBuffer.length < msgSize + 2) break;

		  const messageBuffer = recvBuffer.slice(2, 2 + msgSize);
		  const decoded = Root.lookupType('ProtoMessage').decode(messageBuffer);

		  handleMessage(decoded); // 👈 your dispatcher
		  recvBuffer = recvBuffer.slice(2 + msgSize);
		}
	  } catch (err) {
		console.error('❌ Error decoding message:', err);
	  }
	});

const protoFiles = [
    'OpenApiCommonMessages.proto',
    'OpenApiCommonModelMessages.proto',
    'OpenApiMessages.proto',
    'OpenApiModelMessages.proto'
  ];

  const root = await protobuf.load(protoFiles.map(f => path.join(protoDir, f)));

  const ProtoMessage = root.lookupType('ProtoMessage');
  const PayloadTypeEnum = root.lookupEnum('ProtoOAPayloadType');

  const MessageTypes = {
    ProtoOAVersionReq: root.lookupType('ProtoOAVersionReq'),
    ProtoOAApplicationAuthReq: root.lookupType('ProtoOAApplicationAuthReq'),
    ProtoOAAccountAuthReq: root.lookupType('ProtoOAAccountAuthReq'),
    ProtoOASubscribeSpotsReq: root.lookupType('ProtoOASubscribeSpotsReq'),
    ProtoOASymbolsListReq: root.lookupType('ProtoOASymbolsListReq'),
    ProtoOASymbolsListRes: root.lookupType('ProtoOASymbolsListRes'),
    ProtoOAErrorRes: root.lookupType('ProtoOAErrorRes'),
    ProtoOASpotEvent: root.lookupType('ProtoOASpotEvent')
  };

  const payloadTypeMap = {
    ProtoOAVersionReq: PayloadTypeEnum.values.PROTO_OA_VERSION_REQ,
    ProtoOAApplicationAuthReq: PayloadTypeEnum.values.PROTO_OA_APPLICATION_AUTH_REQ,
    ProtoOAAccountAuthReq: PayloadTypeEnum.values.PROTO_OA_ACCOUNT_AUTH_REQ,
    ProtoOASubscribeSpotsReq: PayloadTypeEnum.values.PROTO_OA_SUBSCRIBE_SPOTS_REQ,
    ProtoOASymbolsListReq: PayloadTypeEnum.values.PROTO_OA_SYMBOLS_LIST_REQ
  };

  function createEmitter() {
    const handlers = new Map();
    return {
      on: (type, handler) => handlers.set(type, handler),
      emit: (type, data) => handlers.get(type)?.(data),
      has: (type) => handlers.has(type)
    };
  }

  const emitter = createEmitter();

  function sendMessage(socket, typeName, payload) {
    const messageType = MessageTypes[typeName];
    const payloadType = payloadTypeMap[typeName];
    const message = messageType.create(payload);
    const messageBuffer = messageType.encode(message).finish();
    const wrapper = ProtoMessage.create({ payloadType, payload: messageBuffer });
    const wrapperBuffer = ProtoMessage.encode(wrapper).finish();
    const lengthBuffer = Buffer.alloc(4);
    lengthBuffer.writeUInt32BE(wrapperBuffer.length, 0);
    socket.write(lengthBuffer);
    socket.write(wrapperBuffer);
    console.log(`→ Sent ${typeName}`);
  }

  async function promptSymbol(symbols) {
    return new Promise((resolve) => {
      const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
      rl.question('📝 Enter symbol to subscribe (e.g. EURUSD): ', inputSymbol => {
        const normalized = inputSymbol.trim().toUpperCase();
        const match = symbols.find(s => s.symbolName.toUpperCase() === normalized);
        if (!match) {
          console.error(`❌ Symbol "${inputSymbol}" not found. Try again.`);
          rl.close();
          resolve(promptSymbol(symbols)); // recursive retry
        } else {
          rl.close();
          resolve(match);
        }
      });
    });
  }

  let allSymbols = [];
	const socket = tls.connect(
	  { host: 'live.ctraderapi.com', port: 5035, servername: 'live.ctraderapi.com' },
	  () => {
		console.log('🔗 Connected');
		sendMessage(socket, 'ProtoOAVersionReq', { version: { major: 2, minor: 0, patch: 0 } });
	  }
	);

let recvBuffer = Buffer.alloc(0);  // ✅ FIXED


  emitter.on('version', () => {
    console.log('📡 Version handshake complete');
    sendMessage(socket, 'ProtoOAApplicationAuthReq', {
      clientId: CTRADER_CLIENT_ID,
      clientSecret: CTRADER_CLIENT_SECRET
    });
  });

  emitter.on('auth_app', () => {
    console.log('✅ App authenticated');
    sendMessage(socket, 'ProtoOAAccountAuthReq', {
      ctidTraderAccountId: parseInt(CTRADER_ACCOUNT_ID),
      accessToken: CTRADER_ACCESS_TOKEN
    });
  });

  emitter.on('auth_account', () => {
    console.log('🔐 Account authenticated');
    sendMessage(socket, 'ProtoOASymbolsListReq', {
      ctidTraderAccountId: parseInt(CTRADER_ACCOUNT_ID)
    });
  });

  emitter.on('symbols_list', async (res) => {
    allSymbols = res.symbol;
    console.log(`📥 Received ${res.symbol.length} symbols`);

    const csvPath = path.join(__dirname, 'symbols.csv');
    const header = 'symbolId,symbolName,enabled,description\n';
    const rows = res.symbol
      .map(s => `${s.symbolId},"${s.symbolName}",${s.enabled ?? ''},"${s.description ?? ''}"`)
      .join('\n');
    fs.writeFileSync(csvPath, header + rows, 'utf8');

    console.log(`📄 Exported to symbols.csv`);

    const match = await promptSymbol(allSymbols);
    sendMessage(socket, 'ProtoOASubscribeSpotsReq', {
      ctidTraderAccountId: parseInt(CTRADER_ACCOUNT_ID),
      symbolId: [match.symbolId]
    });
  });

  emitter.on('spot', (spot) => {
    const scale = 100000;
    const name = allSymbols.find(s => s.symbolId === spot.symbolId)?.symbolName || `ID ${spot.symbolId}`;
    const bid = spot.bid ? (spot.bid / scale).toFixed(5) : 'N/A';
    const ask = spot.ask ? (spot.ask / scale).toFixed(5) : 'N/A';
    console.log(`💹 ${name} | Bid: ${bid} | Ask: ${ask}`);
  });

  emitter.on('error', (err) => {
    console.error(`❌ Error ${err.errorCode}: ${err.description}`);
  });

  socket.on('data', chunk => {
    let recvBuffer = Buffer.concat([recvBuffer, chunk]);
    while (recvBuffer.length >= 4) {
      const msgLen = recvBuffer.readUInt32BE(0);
      if (recvBuffer.length < 4 + msgLen) break;

      const msgBuffer = recvBuffer.slice(4, 4 + msgLen);
      recvBuffer = recvBuffer.slice(4 + msgLen);

      const wrapper = ProtoMessage.decode(msgBuffer);
      const payloadBuffer = wrapper.payload;

      switch (wrapper.payloadType) {
        case PayloadTypeEnum.values.PROTO_OA_VERSION_RES:
          return emitter.emit('version');
        case PayloadTypeEnum.values.PROTO_OA_APPLICATION_AUTH_RES:
          return emitter.emit('auth_app');
        case PayloadTypeEnum.values.PROTO_OA_ACCOUNT_AUTH_RES:
          return emitter.emit('auth_account');
        case PayloadTypeEnum.values.PROTO_OA_SYMBOLS_LIST_RES:
          return emitter.emit('symbols_list', MessageTypes.ProtoOASymbolsListRes.decode(payloadBuffer));
        case PayloadTypeEnum.values.PROTO_OA_SPOT_EVENT:
          return emitter.emit('spot', MessageTypes.ProtoOASpotEvent.decode(payloadBuffer));
        case PayloadTypeEnum.values.PROTO_OA_ERROR_RES:
          return emitter.emit('error', MessageTypes.ProtoOAErrorRes.decode(payloadBuffer));
        default:
          console.warn(`ℹ️ Unhandled type: ${wrapper.payloadType}`);
      }
    }
  });

  socket.on('error', err => {
    console.error('⚠️ Socket error:', err.message);
    process.exit(1);
  });

  socket.on('close', () => {
    console.log('🔒 Connection closed');
    process.exit(0);
  });
}

await refreshAccessToken();
await startTickStream();
