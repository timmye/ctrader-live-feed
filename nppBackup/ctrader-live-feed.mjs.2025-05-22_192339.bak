import tls from 'tls';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';
import fetch from 'node-fetch';
import readline from 'readline';
import protobuf from 'protobufjs';
import { fileURLToPath } from 'url';

dotenv.config();

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const protoDir = path.join(__dirname, 'protos');

let {
  CTRADER_CLIENT_ID,
  CTRADER_CLIENT_SECRET,
  CTRADER_ACCESS_TOKEN,
  CTRADER_REFRESH_TOKEN,
  CTRADER_ACCOUNT_ID
} = process.env;

const CTP_OAUTH_ENDPOINT = 'https://connect.spotware.com/apps/token';
const CLI_SYMBOL = process.argv.includes('--symbol')
  ? process.argv[process.argv.indexOf('--symbol') + 1]?.toUpperCase()
  : null;

async function refreshAccessToken(maxRetries = 3) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const response = await fetch(CTP_OAUTH_ENDPOINT, {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams({
          grant_type: 'refresh_token',
          client_id: CTRADER_CLIENT_ID,
          client_secret: CTRADER_CLIENT_SECRET,
          refresh_token: CTRADER_REFRESH_TOKEN
        })
      });

      if (!response.ok) throw new Error(`HTTP ${response.status}: ${await response.text()}`);

      const data = await response.json();
      console.log('🔄 Token refreshed successfully');

      // Update .env
      const envPath = path.join(__dirname, '.env');
      const envLines = fs.readFileSync(envPath, 'utf8').split('\n');
      const updateLine = (key, value) =>
        value ? `${key}=${value}` : envLines.find(line => line.startsWith(key));
      const newEnv = [
        updateLine('CTRADER_CLIENT_ID', CTRADER_CLIENT_ID),
        updateLine('CTRADER_CLIENT_SECRET', CTRADER_CLIENT_SECRET),
        updateLine('CTRADER_ACCESS_TOKEN', data.access_token),
        updateLine('CTRADER_REFRESH_TOKEN', data.refresh_token),
        updateLine('CTRADER_ACCOUNT_ID', CTRADER_ACCOUNT_ID)
      ].join('\n');
      fs.writeFileSync(envPath, newEnv, 'utf8');

      CTRADER_ACCESS_TOKEN = data.access_token;
      CTRADER_REFRESH_TOKEN = data.refresh_token;
      return;
    } catch (err) {
      console.error(`❌ Token refresh failed (attempt ${attempt}): ${err.message}`);
      if (attempt === maxRetries) process.exit(1);
      await new Promise(r => setTimeout(r, 2000 * attempt));
    }
  }
}

async function startTickStream() {
  const protoFiles = [
    'OpenApiCommonMessages.proto',
    'OpenApiCommonModelMessages.proto',
    'OpenApiMessages.proto',
    'OpenApiModelMessages.proto'
  ];

  const root = await protobuf.load(protoFiles.map(f => path.join(protoDir, f)));
  const ProtoMessage = root.lookupType('ProtoMessage');
  const PayloadTypeEnum = root.lookupEnum('ProtoOAPayloadType');

  const MessageTypes = {
    ProtoOAVersionReq: root.lookupType('ProtoOAVersionReq'),
    ProtoOAApplicationAuthReq: root.lookupType('ProtoOAApplicationAuthReq'),
    ProtoOAAccountAuthReq: root.lookupType('ProtoOAAccountAuthReq'),
    ProtoOASubscribeSpotsReq: root.lookupType('ProtoOASubscribeSpotsReq'),
    ProtoOASymbolsListReq: root.lookupType('ProtoOASymbolsListReq'),
    ProtoOASymbolsListRes: root.lookupType('ProtoOASymbolsListRes'),
    ProtoOAErrorRes: root.lookupType('ProtoOAErrorRes'),
    ProtoOASpotEvent: root.lookupType('ProtoOASpotEvent')
  };

  const payloadTypeMap = {
    ProtoOAVersionReq: PayloadTypeEnum.values.PROTO_OA_VERSION_REQ,
    ProtoOAApplicationAuthReq: PayloadTypeEnum.values.PROTO_OA_APPLICATION_AUTH_REQ,
    ProtoOAAccountAuthReq: PayloadTypeEnum.values.PROTO_OA_ACCOUNT_AUTH_REQ,
    ProtoOASubscribeSpotsReq: PayloadTypeEnum.values.PROTO_OA_SUBSCRIBE_SPOTS_REQ,
    ProtoOASymbolsListReq: PayloadTypeEnum.values.PROTO_OA_SYMBOLS_LIST_REQ
  };

  const sendMessage = (socket, typeName, payload) => {
    const messageType = MessageTypes[typeName];
    const payloadType = payloadTypeMap[typeName];
    const message = messageType.create(payload);
    const messageBuffer = messageType.encode(message).finish();
    const wrapper = ProtoMessage.create({ payloadType, payload: messageBuffer });
    const wrapperBuffer = ProtoMessage.encode(wrapper).finish();
    const lengthBuffer = Buffer.alloc(4);
    lengthBuffer.writeUInt32BE(wrapperBuffer.length, 0);
    socket.write(lengthBuffer);
    socket.write(wrapperBuffer);
    console.log(`→ Sent ${typeName}`);
  };

  let allSymbols = [];
  let socket;

  function subscribeToSymbol(symbol) {
    const match = allSymbols.find(s => s.symbolName.toUpperCase() === symbol.toUpperCase());
    if (!match) {
      console.error(`❌ Symbol "${symbol}" not found.`);
      return;
    }
    console.log(`📡 Subscribing to ${match.symbolName} (ID ${match.symbolId})...`);
    sendMessage(socket, 'ProtoOASubscribeSpotsReq', {
      ctidTraderAccountId: parseInt(CTRADER_ACCOUNT_ID),
      symbolId: [match.symbolId]
    });
  }

  function promptSymbol() {
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    rl.question('📝 Enter symbol to subscribe (e.g. EURUSD): ', input => {
      rl.close();
      subscribeToSymbol(input.trim());
    });
  }

  function setupSocket() {
    socket = tls.connect(
      { host: 'live.ctraderapi.com', port: 5035, servername: 'live.ctraderapi.com' },
      () => {
        console.log('🔗 Connected to cTrader Open API');
        sendMessage(socket, 'ProtoOAVersionReq', { version: { major: 2, minor: 0, patch: 0 } });
      }
    );

    let recvBuffer = Buffer.alloc(0);

    socket.on('data', chunk => {
      recvBuffer = Buffer.concat([recvBuffer, chunk]);
      while (recvBuffer.length >= 4) {
        const msgLen = recvBuffer.readUInt32BE(0);
        if (recvBuffer.length < 4 + msgLen) break;

        const msgBuffer = recvBuffer.slice(4, 4 + msgLen);
        recvBuffer = recvBuffer.slice(4 + msgLen);

        const wrapper = ProtoMessage.decode(msgBuffer);
        const payloadBuffer = wrapper.payload;
        const pt = wrapper.payloadType;

        switch (pt) {
          case PayloadTypeEnum.values.PROTO_OA_VERSION_RES:
            console.log('📡 Version handshake complete');
            sendMessage(socket, 'ProtoOAApplicationAuthReq', {
              clientId: CTRADER_CLIENT_ID,
              clientSecret: CTRADER_CLIENT_SECRET
            });
            break;

          case PayloadTypeEnum.values.PROTO_OA_APPLICATION_AUTH_RES:
            console.log('✅ Application authenticated');
            sendMessage(socket, 'ProtoOAAccountAuthReq', {
              ctidTraderAccountId: parseInt(CTRADER_ACCOUNT_ID),
              accessToken: CTRADER_ACCESS_TOKEN
            });
            break;

          case PayloadTypeEnum.values.PROTO_OA_ACCOUNT_AUTH_RES:
            console.log('🔐 Account authenticated');
            sendMessage(socket, 'ProtoOASymbolsListReq', {
              ctidTraderAccountId: parseInt(CTRADER_ACCOUNT_ID)
            });
            break;

          case PayloadTypeEnum.values.PROTO_OA_SYMBOLS_LIST_RES: {
            const res = MessageTypes.ProtoOASymbolsListRes.decode(payloadBuffer);
            allSymbols = res.symbol;
            console.log(`📥 Retrieved ${res.symbol.length} symbols`);

            const csvPath = path.join(__dirname, 'symbols.csv');
            const rows = res.symbol
              .map(s => `${s.symbolId},"${s.symbolName}",${s.enabled ?? ''},"${s.description ?? ''}"`)
              .join('\n');
            fs.writeFileSync(csvPath, 'symbolId,symbolName,enabled,description\n' + rows, 'utf8');
            console.log('📄 Exported symbols list to symbols.csv');

            if (CLI_SYMBOL) {
              subscribeToSymbol(CLI_SYMBOL);
            } else {
              promptSymbol();
            }
            break;
          }

          case PayloadTypeEnum.values.PROTO_OA_SPOT_EVENT: {
            const spot = MessageTypes.ProtoOASpotEvent.decode(payloadBuffer);
            const symbolName =
              allSymbols.find(s => s.symbolId === spot.symbolId)?.symbolName || `ID ${spot.symbolId}`;
            const bid = spot.bid ? (spot.bid / 100000).toFixed(5) : 'N/A';
            const ask = spot.ask ? (spot.ask / 100000).toFixed(5) : 'N/A';
            console.log(`💹 ${symbolName} | Bid: ${bid} | Ask: ${ask}`);
            break;
          }

          case PayloadTypeEnum.values.PROTO_OA_ERROR_RES: {
            const err = MessageTypes.ProtoOAErrorRes.decode(payloadBuffer);
            console.error(`❌ Error: ${err.errorCode} - ${err.description}`);
            break;
          }

          default:
            console.log(`ℹ️ Unknown payload type: ${pt}`);
        }
      }
    });

    socket.on('error', err => {
      console.error('⚠️ Socket error:', err.message);
    });

    socket.on('close', () => {
      console.warn('🔌 Connection closed. Reconnecting in 5s...');
      setTimeout(setupSocket, 5000);
    });
  }

  setupSocket();
}

await refreshAccessToken();
await startTickStream();
