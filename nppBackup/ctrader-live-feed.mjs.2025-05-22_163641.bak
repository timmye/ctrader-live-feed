// ... [all previous imports and setup remain unchanged] ...

const MessageTypes = {
  // Add this new one:
  ProtoOASymbolsListReq: root.lookupType('ProtoOASymbolsListReq'),
  ProtoOASymbolsListRes: root.lookupType('ProtoOASymbolsListRes'),
  // Rest unchanged:
  ProtoOAVersionReq: root.lookupType('ProtoOAVersionReq'),
  ProtoOAApplicationAuthReq: root.lookupType('ProtoOAApplicationAuthReq'),
  ProtoOAAccountAuthReq: root.lookupType('ProtoOAAccountAuthReq'),
  ProtoOASubscribeSpotsReq: root.lookupType('ProtoOASubscribeSpotsReq'),
  ProtoOAAccountAuthRes: root.lookupType('ProtoOAAccountAuthRes'),
  ProtoOASubscribeSpotsRes: root.lookupType('ProtoOASubscribeSpotsRes'),
  ProtoOASpotEvent: root.lookupType('ProtoOASpotEvent'),
  ProtoOAErrorRes: root.lookupType('ProtoOAErrorRes')
};

const PayloadTypeEnum = {
  // Add this new one:
  PROTO_OA_SYMBOLS_LIST_REQ: 2115,
  PROTO_OA_SYMBOLS_LIST_RES: 2116,
  // Rest unchanged:
  PROTO_OA_VERSION_REQ: 2100,
  PROTO_OA_VERSION_RES: 2101,
  PROTO_OA_APPLICATION_AUTH_REQ: 2102,
  PROTO_OA_APPLICATION_AUTH_RES: 2103,
  PROTO_OA_ACCOUNT_AUTH_REQ: 2106,
  PROTO_OA_ACCOUNT_AUTH_RES: 2107,
  PROTO_OA_SUBSCRIBE_SPOTS_REQ: 2108,
  PROTO_OA_SUBSCRIBE_SPOTS_RES: 2109,
  PROTO_OA_SPOT_EVENT: 2110,
  PROTO_OA_ERROR_RES: 2111
};

const payloadTypeMap = {
  ProtoOAVersionReq: PayloadTypeEnum.PROTO_OA_VERSION_REQ,
  ProtoOAApplicationAuthReq: PayloadTypeEnum.PROTO_OA_APPLICATION_AUTH_REQ,
  ProtoOAAccountAuthReq: PayloadTypeEnum.PROTO_OA_ACCOUNT_AUTH_REQ,
  ProtoOASubscribeSpotsReq: PayloadTypeEnum.PROTO_OA_SUBSCRIBE_SPOTS_REQ,
  ProtoOASymbolsListReq: PayloadTypeEnum.PROTO_OA_SYMBOLS_LIST_REQ
};

// ... [rest of the setup unchanged]

let accountId = parseInt(CTRADER_ACCOUNT_ID);
let eurusdSymbolId = null;

const connection = net.connect({ host: CTRADER_HOST, port: CTRADER_PORT }, () => {
  console.log('🔗 Connected to cTrader Open API');
  sendMessage(connection, 'ProtoOAVersionReq', { version: '3.0' });
});

connection.on('data', (data) => {
  const payloadType = data.readUInt16BE(0);
  const payloadBuffer = data.slice(2);

  switch (payloadType) {
    case PayloadTypeEnum.PROTO_OA_VERSION_RES:
      console.log('📡 Version handshake complete');
      sendMessage(connection, 'ProtoOAApplicationAuthReq', {
        clientId: CTRADER_CLIENT_ID,
        clientSecret: CTRADER_CLIENT_SECRET
      });
      break;

    case PayloadTypeEnum.PROTO_OA_APPLICATION_AUTH_RES:
      console.log('✅ Application authenticated');
      sendMessage(connection, 'ProtoOAAccountAuthReq', {
        ctidTraderAccountId: accountId,
        accessToken: CTRADER_ACCESS_TOKEN
      });
      break;

    case PayloadTypeEnum.PROTO_OA_ACCOUNT_AUTH_RES:
      console.log('🔐 Account authenticated');
      sendMessage(connection, 'ProtoOASymbolsListReq', {
        ctidTraderAccountId: accountId
      });
      break;

    case PayloadTypeEnum.PROTO_OA_SYMBOLS_LIST_RES: {
      const res = MessageTypes.ProtoOASymbolsListRes.decode(payloadBuffer);
      const eurusd = res.symbol.find(s => s.symbolName === 'EURUSD');

      if (!eurusd) {
        console.error('❌ EURUSD not found in symbol list');
        return connection.end();
      }

      eurusdSymbolId = eurusd.symbolId;
      console.log(`✅ Found EURUSD with symbolId: ${eurusdSymbolId}`);

      sendMessage(connection, 'ProtoOASubscribeSpotsReq', {
        ctidTraderAccountId: accountId,
        symbolId: eurusdSymbolId
      });
      break;
    }

    case PayloadTypeEnum.PROTO_OA_SUBSCRIBE_SPOTS_RES:
      console.log('📶 Spot subscription confirmed');
      break;

    case PayloadTypeEnum.PROTO_OA_SPOT_EVENT: {
      const spot = MessageTypes.ProtoOASpotEvent.decode(payloadBuffer);
      console.log(`💹 ${spot.symbolName} → Bid: ${spot.bidPrice}, Ask: ${spot.askPrice}`);
      break;
    }

    case PayloadTypeEnum.PROTO_OA_ERROR_RES: {
      const error = MessageTypes.ProtoOAErrorRes.decode(payloadBuffer);
      console.error(`❌ Error: ${error.errorCode} - ${error.description}`);
      break;
    }

    default:
      console.log(`ℹ️ Received message type ${payloadType}`);
  }
});

connection.on('error', (err) => {
  console.error('❌ Connection error:', err);
});

connection.on('end', () => {
  console.log('🔒 Connection closed');
});
