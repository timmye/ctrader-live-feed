// ctrader-live-price.mjs

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import grpc from '@grpc/grpc-js';
import protoLoader from '@grpc/proto-loader';
import dotenv from 'dotenv';
import fetch from 'node-fetch';

// Load environment variables
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load .proto files
const PROTO_PATHS = [
  path.join(__dirname, 'protos', 'OpenApiMessages.proto'),
  path.join(__dirname, 'protos', 'OpenApiCommonMessages.proto'),
  path.join(__dirname, 'protos', 'OpenApiCommonModelMessages.proto'),
  path.join(__dirname, 'protos', 'OpenApiModelMessages.proto'),
];

const packageDefinition = protoLoader.loadSync(PROTO_PATHS, {
  keepCase: true,
  longs: String,
  enums: String,
  defaults: true,
  oneofs: true,
});

const protoDescriptor = grpc.loadPackageDefinition(packageDefinition);
const OpenApiService = protoDescriptor.OpenApiService;

// Create gRPC client
const client = new OpenApiService(
  'live.ctraderapi.com:5035',
  grpc.credentials.createSsl()
);

// Helper function to send a message and receive a response
function sendMessage(method, request) {
  return new Promise((resolve, reject) => {
    client[method](request, (error, response) => {
      if (error) {
        reject(error);
      } else {
        resolve(response);
      }
    });
  });
}

// Refresh access token
async function refreshAccessToken() {
  const response = await fetch('https://api.spotware.com/connect/token', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: new URLSearchParams({
      grant_type: 'refresh_token',
      refresh_token: process.env.CTRADER_REFRESH_TOKEN,
      client_id: process.env.CTRADER_CLIENT_ID,
      client_secret: process.env.CTRADER_CLIENT_SECRET,
    }),
  });

  if (!response.ok) {
    throw new Error(`Failed to refresh token: ${response.statusText}`);
  }

  const data = await response.json();

  // Update .env file
  const envPath = path.join(__dirname, '.env');
  const envConfig = dotenv.parse(fs.readFileSync(envPath));

  envConfig.CTRADER_ACCESS_TOKEN = data.access_token;
  envConfig.CTRADER_REFRESH_TOKEN = data.refresh_token;

  const updatedEnv = Object.entries(envConfig)
    .map(([key, value]) => `${key}=${value}`)
    .join('\n');

  fs.writeFileSync(envPath, updatedEnv);

  // Update process.env
  process.env.CTRADER_ACCESS_TOKEN = data.access_token;
  process.env.CTRADER_REFRESH_TOKEN = data.refresh_token;

  console.log('Access token refreshed and .env updated.');
}

// Main function
async function main() {
  try {
    // Application authentication
    const appAuthRequest = {
      clientId: process.env.CTRADER_CLIENT_ID,
      clientSecret: process.env.CTRADER_CLIENT_SECRET,
    };

    const appAuthResponse = await sendMessage('AppAuth', appAuthRequest);
    console.log('Application authenticated.');

    // Account authentication
    const accountAuthRequest = {
      ctidTraderAccountId: parseInt(process.env.CTRADER_ACCOUNT_ID, 10),
      accessToken: process.env.CTRADER_ACCESS_TOKEN,
    };

    try {
      const accountAuthResponse = await sendMessage('AccountAuth', accountAuthRequest);
      console.log('Account authenticated.');
    } catch (error) {
      if (error.message.includes('UNAUTHENTICATED')) {
        console.log('Access token expired. Refreshing token...');
        await refreshAccessToken();

        // Retry account authentication
        accountAuthRequest.accessToken = process.env.CTRADER_ACCESS_TOKEN;
        const accountAuthResponse = await sendMessage('AccountAuth', accountAuthRequest);
        console.log('Account authenticated after token refresh.');
      } else {
        throw error;
      }
    }

    // Subscribe to live tick data
    const subscribeRequest = {
      ctidTraderAccountId: parseInt(process.env.CTRADER_ACCOUNT_ID, 10),
      symbolId: parseInt(process.env.CTRADER_SYMBOL_ID, 10),
    };

    const call = client.SubscribeSpots(subscribeRequest);

    call.on('data', (data) => {
      console.log('Received tick data:', data);
    });

    call.on('error', (error) => {
      console.error('Error receiving tick data:', error);
    });

    call.on('end', () => {
      console.log('Tick data stream ended.');
    });
  } catch (error) {
    console.error('Error:', error);
  }
}

main();
